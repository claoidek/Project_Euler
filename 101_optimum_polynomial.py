# Generates optimum polynomials to fit various sequences and finds the sum of
# their first incorrect terms
# More details can be found here: https://projecteuler.net/problem=101

from time import clock
from numpy import polyfit

def polynomial(n):
    return 1 - n + n**2 - n**3 + n**4 - n**5 + n**6 - n**7 + n**8 - n**9 + n**10

start = clock()

total = 0
sequence = []
degree = 10

# Finds the first 10 terms of the sequence generated by the above polynomial
for n in range(1,degree+2):
    sequence.append(polynomial(n))

# Uses numpy's polyfit function to find the polynomial that fits the first k
# terms of the sequence
for k in range(1,degree+1):
    poly = polyfit(range(1,k+1),sequence[:k],k-1)
    # Finds the first term generated by that polynomial that does not match the
    # original polynomial
    for n in range(1,degree+2):
        term = 0
        for index,coeff in enumerate(poly):
            term += round(coeff)*n**(k-index-1)
        if term != sequence[n-1]:
            total += int(term)
            break

end = clock()

print total
print "Time taken: ", end-start, " s"
